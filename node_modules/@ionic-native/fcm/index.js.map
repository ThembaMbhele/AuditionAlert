{"version":3,"sources":["../../../src/@ionic-native/plugins/fcm/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAgB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AASH;IAAyB,uBAAiB;IAA1C;;IAkEA,CAAC;IAjEC;;;;OAIG;IAEH,sBAAQ,GAAR;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,4BAAc,GAAd;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,8BAAgB,GAAhB,UAAiB,KAAa;QAC5B,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,kCAAoB,GAApB,UAAqB,KAAa;QAChC,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAMH,4BAAc,GAAd;QACE,MAAM,CAAC;IACT,CAAC;IACI,cAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,kBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA1DA;QADC,OAAO,EAAE;;;;uCAGT;IAUD;QAHC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCACgB,UAAU;6CAE3B;IAUD;QADC,OAAO,EAAE;;;;+CAGT;IAUD;QADC,OAAO,EAAE;;;;mDAGT;IAYD;QALC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;wCACgB,UAAU;6CAE3B;IA3DU,GAAG;QARf,MAAM,CAAC;YACN,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,oBAAoB;YAC5B,SAAS,EAAE,WAAW;YACtB,IAAI,EAAE,kDAAkD;YACxD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,GAAG,CAkEf;IAAD,UAAC;CAlED,AAkEC,CAlEwB,iBAAiB,GAkEzC;SAlEY,GAAG","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface NotificationData {\n  /**\n   * Determines whether the notification was pressed or not\n   */\n\n  wasTapped: boolean;\n\n  /**\n   * Notification data hash item\n   */\n\n  [name: string]: any;\n}\n\n/**\n * @name FCM\n * @description\n * Provides basic functionality for Firebase Cloud Messaging\n *\n * @usage\n * ```typescript\n * import { FCM } from '@ionic-native/fcm';\n *\n * constructor(private fcm: FCM) {}\n *\n * ...\n *\n * this.fcm.subscribeToTopic('marketing');\n *\n * this.fcm.getToken().then(token => {\n *   backend.registerToken(token);\n * });\n *\n * this.fcm.onNotification().subscribe(data => {\n *   if(data.wasTapped){\n *     console.log(\"Received in background\");\n *   } else {\n *     console.log(\"Received in foreground\");\n *   };\n * });\n *\n * this.fcm.onTokenRefresh().subscribe(token => {\n *   backend.registerToken(token);\n * });\n *\n * this.fcm.unsubscribeFromTopic('marketing');\n *\n * ```\n * @interfaces\n * NotificationData\n */\n@Plugin({\n  pluginName: 'FCM',\n  plugin: 'cordova-plugin-fcm',\n  pluginRef: 'FCMPlugin',\n  repo: 'https://github.com/fechanique/cordova-plugin-fcm',\n  platforms: ['Android', 'iOS']\n})\n\nexport class FCM extends IonicNativePlugin {\n  /**\n   * Gets device's current registration id\n   *\n   * @returns {Promise<string>} Returns a Promise that resolves with the registration id token\n   */\n  @Cordova()\n  getToken(): Promise<string> {\n    return;\n  }\n\n  /**\n   * Event firing on the token refresh\n   *\n   * @returns {Observable<string>} Returns an Observable that notifies with the change of device's registration id\n   */\n  @Cordova({\n    observable: true\n  })\n  onTokenRefresh(): Observable<string> {\n    return;\n  }\n\n  /**\n   * Subscribes you to a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n   *\n   * @param {string} topic Topic to be subscribed to\n   *\n   * @returns {Promise<any>} Returns a promise resolving in result of subscribing to a topic\n   */\n  @Cordova()\n  subscribeToTopic(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Unsubscribes you from a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n   *\n   * @param {string} topic Topic to be unsubscribed from\n   *\n   * @returns {Promise<any>} Returns a promise resolving in result of unsubscribing from a topic\n   */\n  @Cordova()\n  unsubscribeFromTopic(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Watch for incoming notifications\n   *\n   * @returns {Observable<any>} returns an object with data from the notification\n   */\n  @Cordova({\n    observable: true,\n    successIndex: 0,\n    errorIndex: 2\n  })\n  onNotification(): Observable<NotificationData> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}